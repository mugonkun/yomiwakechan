FNOM	EQU	"SOUND:@"
.186
	include	B:\MASM\WORK\std_io.asm
	INCLUDE	B:\MASM\WORK\FILEIO.ASM
	INCLUDELIB B:\MASM\WORK\USER_01.LIB
	EXTRN SOUND:FAR
CODE	SEGMENT
	ASSUME	CS:CODE,DS:CODE,SS:CODE
	ORG	100H
START:	JMP	_CONT1
;;−−−−−−−−−−−−−−−−−−−−−−コンパイラのエラーメッセージ
ERRPNM	DB "　　　　パラメータが足りません",CR,LF,"$"
ERRV	DB "エラー：Ｖコードでエラー            書式： V n",CR,LF,"$"
ERRQ	DB "エラー：Ｑコードでエラー          　書式： Q n",cr,lf,"$"
ERRT	DB "エラー：Ｔコードでエラー　          書式： T n",cr,lf,"$"
ERRO	DB "エラー：Ｏコードでエラー            書式： O n",CR,LF,"$"
ERRUP	DB "エラー：＞コードでエラー　        　書式： >",cr,lf,"$"
ERRDOWN	DB "エラー：＜コードでエラー          　書式： <",cr,lf,"$"
ERRL	DB "エラー：Ｌコードでエラー            書式： L n",CR,LF,"$"
ERRAND	DB "エラー：＆コードでエラー        　　書式： &",cr,lf,"$"
ERRN	DB "エラー：Ｎコードでエラー          　書式： N n",cr,lf,"$"
ERR@	DB "エラー：＠コードでエラー            書式： @ n",CR,LF,"$"
ERRI	DB "エラー：Ｉコードでエラー        　　書式： I n1, n2, n3",cr,lf,"$"
ERRP	db "　　　　パラメータが大き過ぎます",cr,lf,"$"
ERRWH	DB " ＜−−−問題の文字",CR,LF,"$"
ERRCNM1	DB "　　　　チャネル番号は",34
ERRCNM2	DB " ",34,"です",CR,LF,"$"
ERRGNM1	DB "        行番号は",34,"$"
ERRGNM2 DB 34,"です",CR,LF,"$"
ERRMOVR	DB "警告！！　ファイルが大き過ぎます",CR,LF
	DB "　　　　　オブジェクトファイルが２７ＫＢを超えてます",CR,LF,"$"
DATBUF1	DW	OFFSET DATBUF
SIZE	DW	65535
CR_LF	PROC
	PUSH	AX
	PUSH	DX
	MOV	AH,06H
	MOV	DL,CR
	INT	21H
	MOV	DL,LF
	INT	21H
	POP	DX
	POP	AX
	RET
CR_LF	ENDP
PCHN:	MOV	DX,OFFSET ERRCNM1
	MOV	AX,0900H
	INT	21H
	RET
PNOM:	CMP	AX,BX
	JB	NOPRT
	XOR	CL,CL
KSUB:	SUB	AX,BX
	INC	CL
	CMP	AX,BX
	JAE	KSUB
	ADD	CL,48
	PUTCHR	CL
	RET
NOPRT:	PUTCHR	"0"
	RET
ADCWORK	DB	0
_EXIT:	MOV	ADCWORK,0
	MOV	AX,1
	MOV	SI,DATBUF1
_LPLF:	INC	ADCWORK
	CMP	BYTE PTR [SI],CR
	JNE	_COO
	MOV	ADCWORK,0
	INC	AX
_COO:	CMP	ADCWORK,80
	JB	__A
	INC	AX
	MOV	ADCWORK,0
__A:	INC	SI
	CMP	SI,DI
	JB	_LPLF
	PUTSTR	ERRGNM1
	MOV	BX,10000
	CALL	PNOM
	MOV	BX,1000
	CALL	PNOM
	MOV	BX,100
	CALL	PNOM
	MOV	BX,10
	CALL	PNOM
	MOV	BX,1
	CALL	PNOM
	PUTSTR	ERRGNM2
	CLOSEH	HANDLE
	MOV	DX,OFFSET PATHD
	MOV	AX,4100H
	INT	21H
	EXIT
;;−−−−−−−−−−−−−−−−−−−−−−ＭＭＬコードのコンパイル
C_R_L_F:
	PUSH	AX
SC2:	MOV	AH,BYTE PTR [DI]
	MOV	AL,BYTE PTR [DI+1]
	INC	DI
	CMP	AH,CR
	JNE	SC2
	CMP	AL,LF
	JNE	SC2
	INC	DI
	POP	AX
	RET


B_BUFF	DB	0H
ASC_HB:	PUSH	AX
	PUSH	CX		;;    B_BUFF<[DI]
	PUSH	BX
	MOV	AL,0
_C88:	MOV	AH,[DI]		;;  BYTE PTR=STR ASC
	INC	DI
	CMP	AH," "
	JE	_C88
	CMP	AH,","
	JE	_C88
	DEC	DI
	CMP	AH,"0"
	JB	ER11
	CMP	AH,"9"
	JA	ER11
	SUB	AH,"0"
	MOV	AL,AH
	INC	DI
_CO10:	MOV	AH,[DI]
	INC	DI
	DEC	DI
	CMP	AH,"0"
	JB	_SET
	CMP	AH,"9"
	JA	_SET
	SUB	AH,"0"
	MOV	CL,AL
	SHL	AL,1
	SHL	AL,1
	SHL	AL,1
	ADD	AL,CL
	ADD	AL,CL
	ADD	AL,AH
	INC	DI
	JMP	_CO10
_SET:	MOV	B_BUFF,AL
	MOV	AL,0
	RCL	AL,1
	POP	BX
	POP	CX
	POP	AX
	RET
ER11:	MOV	AL,10000000B
	RCL	AL,1
	POP	DX
	POP	CX
	POP	AX
	RET

ERRMAS	PROC
	MOV	AH,09H
	MOV	DX,OFFSET RET_MAS
	INT	21H
	MOV	AH,4CH
	INT	21H
ERRMAS	ENDP

	PUBLIC	TRANS
TRANS	PROC
	MOV	BYTE PTR ER_FLAG,0
	JMP	_CONT22
ER_FLAG	DB	0

_CONT23:
	MOV	BYTE PTR ER_FLAG,0FFH
	INC	BX
	CALL	ASC_HB
	JC	_DEF
	MOV	SI,BX
	CALL	_COM_C
	MOV	AL,[BX]
	JMP	OFFTIME
_DEF:	MOV	AL,BYTE PTR D_CH1
	MOV	[BX],AL
	JMP	_C12
OFFTIME:
	CMP	BYTE PTR [DI],"."
	JNE	_C12
	MOV	AL,[BX]
	SHR	AL,1
	ADD	[BX],AL
	MOV	AL,[BX]
	INC	DI
_C12:
	MOV	AL,[BX]
	MOV	CL,D_CH3
	XOR	CH,CH
	XOR	AH,AH
	XOR	DX,DX
SC_:	ADD	DX,AX
	LOOP	SC_
	SHR	DX,1
	SHR	DX,1
	SHR	DX,1

	CMP	BYTE PTR [BX],DL
	JE	NOISE_A
	INC	BX
	MOV	[BX],DL
	INC	BX
	JMP	_CONT22
NOISE_A:
	INC	BX
;	DEC	DL
	MOV	[BX],DL
	INC	BX
_CONT22:
	CMP	BYTE PTR [DI],"C"
	JNE	_CONT24
	INC	DI
	CMP	BYTE PTR [DI],"-"
	JE	_C1
	CMP	BYTE PTR [DI],"+"
	JE	_C2
	MOV	BYTE PTR [BX],22
	JMP	_CONT23
_C1:	INC	DI
	MOV	BYTE PTR [BX],44
	JMP	_CONT23
_C2:	INC	DI
	MOV	BYTE PTR [BX],24
	JMP	_CONT23
_CONT24:
	CMP	BYTE PTR [DI],"D"
	JNE	_CONT25
	INC	DI
	CMP	BYTE PTR [DI],"-"
	JE	_D1
	CMP	BYTE PTR [DI],"+"
	JE	_D2
	MOV	BYTE PTR [BX],26
	JMP	_CONT23
_D1:	INC	DI
	MOV	BYTE PTR [BX],24
	JMP	_CONT23
_D2:	INC	DI
	MOV	BYTE PTR [BX],28
	JMP	_CONT23
_CONT25:
	CMP	BYTE PTR [DI],"E"
	JNE	_CONT26
	INC	DI
	CMP	BYTE PTR [DI],"-"
	JE	_E1
	MOV	BYTE PTR [BX],30
	JMP	_CONT23
_E1:	INC	DI
	MOV	BYTE PTR [BX],28
	JMP	_CONT23
_CONT26:
	CMP	BYTE PTR [DI],"F"
	JNE	_CONT27
	INC	DI
	CMP	BYTE PTR [DI],"+"
	JE	_F1
	CMP	BYTE PTR [DI],"-"
	JE	_F2
	MOV	BYTE PTR [BX],32
	JMP	_CONT23
_F1:	INC	DI
	MOV	BYTE PTR [BX],34
	JMP	_CONT23
_F2:	INC	DI
	MOV	BYTE PTR [BX],46
	JMP	_CONT23
_CONT27:
	CMP	BYTE PTR [DI],"G"
	JNE	_CONT28
	INC	DI
	CMP	BYTE PTR [DI],"-"
	JE	_G1
	CMP	BYTE PTR [DI],"+"
	JE	_G2
	MOV	BYTE PTR [BX],36
	JMP	_CONT23
_G1:	INC	DI
	MOV	BYTE PTR [BX],34
	JMP	_CONT23
_G2:	INC	DI
	MOV	BYTE PTR [BX],38
	JMP	_CONT23
_CONT28:
	CMP	BYTE PTR [DI],"A"
	JNE	_CONT29
	INC	DI
	CMP	BYTE PTR [DI],"-"
	JE	_A1
	CMP	BYTE PTR [DI],"+"
	JE	_A2
	MOV	BYTE PTR [BX],40
	JMP	_CONT23
_A1:	INC	DI
	MOV	BYTE PTR [BX],38
	JMP	_CONT23
_A2:	INC	DI
	MOV	BYTE PTR [BX],42
	JMP	_CONT23
_CONT29:
	CMP	BYTE PTR [DI],"B"
	JNE	_CONT30
	INC	DI
	CMP	BYTE PTR [DI],"-"
	JE	_B1
	CMP	BYTE PTR [DI],"+"
	JE	_B2
	MOV	BYTE PTR [BX],44
	JMP	_CONT23
_B1:	INC	DI
	MOV	BYTE PTR [BX],42
	JMP	_CONT23
_B2:	INC	DI
	MOV	BYTE PTR [BX],22
	JMP	_CONT23
_CONT30:
	CMP	BYTE PTR [DI],"&"
	JNE	_CONT31
	MOV	BYTE PTR [BX],14
	INC	DI
	INC	BX
	MOV	BYTE PTR ER_FLAG,0FFH
	JMP	_CONT22
_CONT31:
	CMP	BYTE PTR [DI],"R"
	JNE	REFER_
	MOV	BYTE PTR [BX],8
	INC	DI
	MOV	BYTE PTR ER_FLAG,0FFH
	JMP	_CONT23

REFER:	MOV	BYTE PTR ER_FLAG,0FFH
REFER_:
	CMP	BYTE PTR [DI],"T"
	JNE	_CONT11
	MOV	BYTE PTR [BX],4
	INC	BX
	INC	DI
	CALL	ASC_HB
	JNC	_C00
	CALL	CR_LF
	PUTSTR	ERRT
	PUTSTR	ERRPNM
	CALL	PCHN
	CALL	_EXIT
_C00:	MOV	AH,B_BUFF
	MOV	[BX],AH
	INC	BX
	JMP	REFER
_CONT11:
	CMP	BYTE PTR [DI],"L"
	JNE	_CONT12
	INC	DI
	CALL	ASC_HB
	JNC	_C02
	CALL	CR_LF
	PUTSTR	ERRL
	PUTSTR	ERRPNM
	CALL	PCHN
	CALL	_EXIT
_C02:	MOV	SI,OFFSET D_CH1
	CALL	_COM_C		;;[SI]<---<B_BUFF
	CMP	BYTE PTR [DI],"."
	JNE	_CONT90
	INC	DI
	MOV	AL,D_CH1
	SHR	AL,1
	ADD	D_CH1,AL
_CONT90:
	JMP	REFER
_CONT12:
	CMP	BYTE PTR [DI],"O"
	JNE	_CONT13
	MOV	BYTE PTR [BX],6
	INC	BX
	INC	DI
	CALL	ASC_HB
	JNC	_C03
	CALL	CR_LF
	PUTSTR	ERRO
	PUTSTR	ERRPNM
	CALL	PCHN
	CALL	_EXIT
_C03:	MOV	AL,B_BUFF
	MOV	SI,OFFSET D_CH4
	MOV	[BX],AL
	MOV	[SI],AL
	INC	BX
	JMP	REFER
_CONT13:
	CMP	BYTE PTR [DI],"@"
	JNE	_CONT14
	MOV	BYTE PTR [BX],18
	INC	BX
	INC	DI
	CALL	ASC_HB
	JNC	_C04
	CALL	CR_LF
	PUTSTR	ERR@
	PUTSTR	ERRPNM
	CALL	PCHN
	CALL	_EXIT
_C04:	MOV	AL,B_BUFF
	MOV	BYTE PTR [BX],AL
	INC	BX
	JMP	REFER

_CONT14:
	CMP	BYTE PTR [DI],"N"
	JNE	_CONT15
	INC	DI
	CMP	BYTE PTR [DI],"-"
	JNE	SEI
	MOV	BYTE PTR [BX],12
	INC	DI
	CALL	ASC_HB
	JNC	_C05
	JMP	ER_DT

SEI:	MOV	BYTE PTR [BX],16
	CALL	ASC_HB
	JNC	_C05
ER_DT:	CALL	CR_LF
	PUTSTR	ERRN
	PUTSTR	ERRPNM
	CALL	PCHN
	CALL	_EXIT
_C05:	INC	BX
	MOV	CL,B_BUFF
	MOV	[BX],CL
	INC	BX
	JMP	REFER
_CONT15:
	CMP	BYTE PTR [DI]," "
	JNE	_CONT16
	INC	DI
	JMP	REFER
_CONT16:
	CMP	BYTE PTR [DI],"V"
	JNE	_CONT17
	MOV	BYTE PTR [BX],0
	INC	BX
	INC	DI
	CALL	ASC_HB
	JNC	_C10
	CALL	CR_LF
	PUTSTR	ERRV
	PUTSTR	ERRPNM
	CALL	PCHN
	CALL	_EXIT
_C10:	MOV	DL,B_BUFF
	MOV	[BX],DL
	INC	BX
	JMP	REFER
_CONT17:
	CMP	BYTE PTR [DI],"Q"
	JNE	_CONT18
	INC	DI
	CALL	ASC_HB
	JNC	_C6
	CALL	CR_LF
	PUTSTR	ERRQ
	PUTSTR	ERRPNM
	CALL	PCHN
	CALL	_EXIT
_C6:	MOV	DL,B_BUFF
	MOV	SI,OFFSET D_CH3
	MOV	[SI],DL
	JMP	REFER
_CONT18:
	CMP	BYTE PTR [DI],">"
	JNE	_CONT19
	INC	DI
	MOV	SI,OFFSET D_CH4
	INC	BYTE PTR [SI]
	MOV	BYTE PTR [BX],6
	INC	BX
	MOV	AL,[SI]
	MOV	[BX],AL
	CMP	AL,8
	JB	P_PS
	CALL	CR_LF
	PUTSTR	ERRUP
	PUTSTR	ERRP
	CALL	PCHN
	CALL	_EXIT
P_PS:	INC	BX
	JMP	REFER
_CONT19:
	CMP	BYTE PTR [DI],"P"
	JNE	_CONT51
	INC	DI
	CALL	ASC_HB
	JMP	REFER



_CONT51:
	CMP	BYTE PTR [DI],"<"
	JNE	_CONT20
	INC	DI
	MOV	SI,OFFSET D_CH4
	DEC	BYTE PTR [SI]
	MOV	BYTE PTR [BX],6
	INC	BX
	MOV	AL,[SI]
	MOV	[BX],AL
	CMP	AL,8
	JB	P_PS2
	CALL	CR_LF
	PUTSTR	ERRDOWN
	PUTSTR	ERRP
	CALL	PCHN
	CALL	_EXIT
P_PS2:	INC	BX
	JMP	REFER
_CONT20:
	CMP	BYTE PTR [DI],"I"
	JNE	_C13
	MOV	BYTE PTR [BX],20
;	INC	DI
	INC	DI
	INC	BX
	CALL	ASC_HB
	JC	_C14
	MOV	AL,B_BUFF
	MOV	[BX],AL
	INC	BX
;	INC	DI
	CALL	ASC_HB
	JC	_C14
	MOV	AL,B_BUFF
	MOV	[BX],AL
;	INC	DI
	INC	BX
	CALL	ASC_HB
	JC	_C14
	MOV	AL,B_BUFF
	MOV	[BX],AL
	INC	BX
	JMP	REFER
_C14:	CALL	CR_LF
	PUTSTR	ERRI
	PUTSTR	ERRPNM
	CALL	PCHN
	CALL	_EXIT
_C13:	CMP	BYTE PTR ER_FLAG,0FFH
	JE	_C89
	PUTSTR	RET_MAS
	PUTCHR	[DI]
	PUTSTR	ERRWH
	PUTSTR	ERRCNM1
	CALL	_EXIT
_C89:	RET
	

TRANS	ENDP

_COM_C:	MOV	CL,B_BUFF
	MOV	CH,128
_CO_LO:	CMP	CL,1
	JE	_SET_O
	SHR	CH,1
	SHR	CL,1
	JMP	_CO_LO
_SET_O:	MOV	[SI],CH
	RET
B_TEST	DW	0H
EQUPMSG	DB	"26K DRIVER Ver1.10 (c)1995 T,Kikuti",cr,lf
	db	"set bect int 62H,14H",cr,lf
	DB	"常駐を開始","$"
FAIL	DB	"常駐に失敗","$"
REMOVM	DB	"常駐を終了","$"
FAIL_MM	DB	"メモリの開放に失敗","$"
ORGVS   DW	00H
ORGVO   DW	00H
ORGIMR	DB	00H
NOTOP1	DB	"シェアリングモードが無効",CR,LF,"$"
NOTOP2	DB	"ファイルが存在しない",CR,LF,"$"
NOTOP3	DB	"パス名が無効",CR,LF,"$"
NOTOP4	DB	"オープンされているファイルが多すぎる",CR,LF,"$"
NOTOP5	DB	"アクセスが拒否された",CR,LF,"$"
NOTOP0C	DB	"無効なアクセス",CR,LF,"$"
MEM	DB	"バッファメモリが確保出来ない",CR,LF,"$"
ANOER_M	DB	"ＡＮＯＴＨＥＲ＿ＥＲＲＯＲ",CR,LF,"$"
RET_MAS	DB	"ＭＭＬの文法が違っている",CR,LF,"$"
N_F_M	DB	CR,LF,"ラベルがみつからない",CR,LF,"$"
CMPLTMSG DB	"ファイルは正常にコンパイルされました",CR,LF
	DB	"[E]ｷｰで演奏を中止します。",CR,LF,"$"
NOTFO_M	DB	"??????????????????????????????",CR,LF,"$"
NOTFOU	DB	"NOT FOUND SOUNDDATA",CR,LF,"$"
FLAGSSG	DB	0
CNOMBER	DB	0
SSGENV	DW	660 DUP (0)
FMDAT	DB	00H
FM_PARA	DB	660 DUP (0)
PART_P1	DB	"Ｐａｒｔ："
PART_P2	DB	"０$"
PART_PE	DB	"　　　Ｃｏｍｐｉｌｉｎｇ",CR,LF,"$"
PART_P3 DB	1BH,"M",1BH,"[12C","　　　Ｄｏｎｅ・・・      ",CR,LF,"$"
VERIFY	DB	FNOM,"1","$",CR
	DB	FNOM,"2","$",CR
	DB	FNOM,"3","$",CR
	DB	FNOM,"4","$",CR
	DB	FNOM,"5","$",CR
	DB	FNOM,"6","$",CR
	DB	FNOM,"7","$",CR
	DB	FNOM,"8","$",CR
	DB	FNOM,"9","$",CR
	DB	FNOM,"10$"
	DB	FNOM,"11$"
	DB	FNOM,"12$"
	DB	FNOM,"13$"
	DB	FNOM,"14$"
	DB	FNOM,"15$"
	DB	FNOM,"16$"
	DB	FNOM,"17$"
	DB	FNOM,"18$"
	DB	FNOM,"19$"
	DB	FNOM,"20$"
V_SSG	DB	"SSGENV:@$"
KEIZOKU	DB	"->$"
CH1	DB	"1:$"
CH2	DB	"2:$"
CH3	DB	"3:$"
CH4	DB	"4:$"
CH5	DB	"5:$"
CH6	DB	"6:$"
SERSTR	DB	"STR:"
DEFST_N	DB	" "
DEFST_M	DB	" $",CR,LF
LO_EL	DB	0
LO_	DB	1
	DB	1
LO_EL_O	DW	0
LO__O	DW	0
P_BEG	DB	0AAH
SAINYUF	DB	0
FM_TL	DB	12	DUP(0)
FMSSG_V	DB	6	DUP(0)
D_CH1	DB	13H DUP(0)
D_CH2	DB	13H DUP(0)
D_CH3	DB	13H DUP(0)
D_CH4	DB	13H DUP(0)
D_CH5	DB	13H DUP(0)
D_CH6	DB	13H DUP(0)
_SPACE	DB	0H
BUFPARA	DW	00H
BUFEND	DW	OFFSET DATBUF
HANDLE	DW	00H
D1	DB	0FFH
D2	DB	0
	PUBLIC	PRT_CHR
PRT_CHR	PROC
	PUSH	CS
	POP	DS
	PUTCHR	CR
	PUTCHR	LF
	MOV	AH,01H
	INT	21H
	MOV	CX,700
	MOV	BX,OFFSET FM_PARA
_L_O_P:	MOV	DL,[BX]
	PUSH	DX
	SHR	DL,1
	SHR	DL,1
	SHR	DL,1
	SHR	DL,1
	ADD	DL,20H
	PUTCHR	DL
	POP	DX
	AND	DL,00001111B
	ADD	DL,20H
	PUTCHR	DL
	INC	BX
	LOOP	_L_O_P
_E_X_I_T:
	RET
PRT_CHR	ENDP

COUNT	DW	10
	PUBLIC	ASC_HEX		;;(WORD or BYTE) PTR [BX]<[DX]
ASC_HEX	PROC			;;		      HEX  ASC
	PUSH	DI
	PUSH	CX
	PUSH	AX
	XOR	CX,CX
	XOR	AX,AX
	MOV	DI,DX
CHECKA:	MOV	DL,[DI]
	INC	DI
	CMP	DL," "
	JE	CHECKA
	CMP	DL,","
	JE	CHECKA
	CMP	DL,"0"
	JB	EG
	DEC	DI
	CMP	DL,"9"
	JNA	ASMAIN
EG:	MOV	DL,1
	SHR	DL,1
	POP	AX
	POP	CX
	MOV	DX,DI
	INC	DX
	POP	DI
	RET
PULS:	INC	DI
ASMAIN: MOV	DL,[DI]
	CMP	DL,","
	JE	SETMEM
	CMP	DL,CR
	JE	SETMEM
	CMP	DL," "
	JE	PULS
	SUB	DL,"0"
	CMP	DL,10
	JA	SETMEM
	MOV	AX,CX
	SHL	CX,1
	SHL	CX,1
	SHL	CX,1
	ADD	CX,AX
	ADD	CX,AX
	MOV	DH,0
	ADD	CX,DX
	INC	DI
	JMP	ASMAIN

SETMEM:	CMP	CX,255
	JA	SETWOR
	MOV	BYTE PTR [BX],CL
	JMP	FIN
SETWOR:	MOV	WORD PTR [BX],CX

FIN:	POP	AX
	POP	CX
	MOV	DL,0
	SHR	DL,1
	MOV	DX,DI
	INC	DX
	POP	DI
	RET
ASC_HEX	ENDP


STRTEST	PROC
	PUSH	BX
	PUSH	CX
	PUSH	DI
	PUSH	SI
	MOV	ES,CX
	MOV	SI,CX
	MOV	DI,DX
LOOPTE: MOV	CX,ES
	MOV	SI,CX
	XOR	CX,CX
	
LOOPTS:	CMP	DI,WORD PTR BUFEND
	JAE	FINI
	MOV	AH,BYTE PTR [SI]
	MOV	BH,BYTE PTR [DI]
	CMP	BH,1AH
	JE	FINI
	CMP	AH,"$"
	JE	SETC
	CMP	BH," "
	JNE	JAMP10
	CMP	BH,";"
	JE	JAMP11
	INC	DI
	JMP	LOOPTS
JAMP11:	CALL	C_R_L_F
	JMP	LOOPTE
JAMP10:	CMP	AH,BH
	JNE	SCREM
	INC	SI
	INC	DI
	JMP	LOOPTS
SCREM:	CMP	BH,";"
	JE	KAIGYO
	CALL	C_R_L_F
	JMP	LOOPTE
KAIGYO:	CALL	C_R_L_F
	JMP	LOOPTE
FINI:	MOV	AX,00H	                 ;;NOT FIND
	POP	SI
	POP	DI
	POP	CX
	POP	BX
	RET	
SETC:	MOV	AX,0FFH
	MOV	DX,DI
	POP	SI
	POP	DI
	POP	CX
	POP	BX
	RET
STRTEST	ENDP


NFPR:	JMP	NFMES
REG_PR	PROC
	CALL	ASC_HEX;;-------------------------------------Attack Late
	JC	NFPR
	INC	BX
	CALL	ASC_HEX;;-------------------------------------Decay  late
	JC	NFPR
	INC	BX
	CALL	ASC_HEX;;-------------------------------------SR
	JC	NFPR
	INC	BX
	CALL	ASC_HEX;;-------------------------------------RR
	JC	NFPR
	MOV	AH,BYTE PTR [BX]
	PUSH	AX
	CALL	ASC_HEX;;-------------------------------------SL
	JC	NFPR
	POP	AX
	SHL	BYTE PTR [BX],1
	SHL	BYTE PTR [BX],1
	SHL	BYTE PTR [BX],1
	SHL	BYTE PTR [BX],1
	OR	BYTE PTR [BX],AH
	INC	BX
	CALL	ASC_HEX;;-------------------------------------TL
	JC	NFPR
	INC	BX
	CALL	ASC_HEX;;-------------------------------------KS
	JC	NFPR
	MOV	AH,BYTE PTR [BX]
	SHL	AH,1
	SHL	AH,1
	SHL	AH,1
	SHL	AH,1
	SHL	AH,1
	SHL	AH,1
	SUB	BX,5
	OR	BYTE PTR [BX],AH
	ADD	BX,5
	CALL	ASC_HEX;;-------------------------------------ML
	JC	NFPR
	MOV	AH,BYTE PTR [BX]
	CALL	ASC_HEX;;-------------------------------------DT
	JC	NFPR
	SHL	BYTE PTR [BX],1
	SHL	BYTE PTR [BX],1
	SHL	BYTE PTR [BX],1
	SHL	BYTE PTR [BX],1
	OR	BYTE PTR [BX],AH
	INC	BX
	CALL	ASC_HEX;;-------------------------------------DT2 ?
	INC	BX
	RET
REG_PR	ENDP
ADWORK	DW	0
ERRNIR	DB CR,LF,"ＦＭ音源音色データのパラメータが足りない。",CR,LF,"$"
NFMES:	PUTSTR	ERRNIR
	MOV	DI,DX
	CALL	_EXIT
	EXIT
	PUBLIC	DAT_COM


LFO	DB	"LFO:$"
OP1	DB	"OP1:$"
OP2	DB	"OP2:$"
OP3	DB	"OP3:$"
OP4	DB	"OP4:$"
DAT_COM	PROC				;;[ADR]<[DX]
	MOV	CX,OFFSET LFO
	MOV	BX,WORD PTR ADR
	PUSH	DX
	DEC	DX
	CALL	STRTEST
	CMP	AX,0FFH
	JNE	NFMES
	CALL	ASC_HEX		;;--------------------------------------FRM
	INC	BX
	JC	NFMES
	CALL	ASC_HEX		;;--------------------------------------SPD
	INC	BX
	JC	NFMES
	CALL	ASC_HEX		;;--------------------------------------DPS
	JNC	GG
	PUTCHR	"#"
	DEC	BX
	DEC	BX
	MOV	AX,[BX]
	ADD	BX,4
	SHL	AH,1
	SHL	AH,1
	SHL	AH,1
	OR	AL,AH
	MOV	[BX],AL
	INC	BX
	JMP	SG
GG:	ADD	BX,2
	CALL	ASC_HEX		;;--------------------------------------ALG
	JC	NFMES
	MOV	AH,BYTE PTR [BX];;			/		FB
	CALL	ASC_HEX		;;---------------------/
	JC	NFMES
	MOV	AL,BYTE PTR [BX]
	SHL	AL,1
	SHL	AL,1
	SHL	AL,1
	OR	AL,AH
	MOV	BYTE PTR [BX],AL
	INC	BX
SG:	POP	DX
	PUSH	DX
	MOV	CX,OFFSET OP1
	CALL	STRTEST

	CMP	AX,0FFH
	JNE	NFMES_

	CALL	REG_PR		;;--------------------------------------OP1
	POP	DX
	PUSH	DX
	MOV	CX,OFFSET OP3
	CALL	STRTEST

	CMP	AX,0FFH
	JNE	NFMES_

	CALL	REG_PR		;;--------------------------------------OP3
	MOV	CX,OFFSET OP2
	POP	DX
	PUSH	DX
	CALL	STRTEST

	CMP	AX,0FFH
	JNE	NFMES_

	CALL	REG_PR		;;--------------------------------------OP2
	MOV	CX,OFFSET OP4
	POP	DX
	PUSH	DX
	CALL	STRTEST

	CMP	AX,0FFH
	JNE	NFMES_

	CALL	REG_PR		;;--------------------------------------OP4
	POP	DX
	RET
DAT_COM	ENDP

NFMES_:	JMP	NFMES

	PUBLIC	SSE
SSE	PROC


_C96:	MOV	DI,DX
	CMP	BYTE PTR [DI],LF
	JE	CHKCON
	CALL	ASC_HEX
 	INC	BX
	INC	AX
	JMP	_C96
	

CHKCON:	INC	DI
	INC	DI
	PUSH	AX
	MOV	AL,[DI]
	CMP	AL,">"
	POP	AX
	JNE	ENV_E
	INC	DI
	MOV	DX,DI
	JMP	_C96
ENV_E:	SUB	BX,AX
	MOV	BYTE PTR [BX],AL
	WRITEH	<OFFSET SSGENV>,AX,HANDLE
	ADD	BX,AX
	SUB	DI,2
	RET
SSE	ENDP

;DEVMAIN	ENDP
	PUBLIC	DEVE
DEVE	PROC
	PUTSTR	PART_P1
	PUTSTR	PART_PE
	MOV	BYTE PTR D_CH3,8

	PUSH	CX
	MOV	DI,DX
	MOV	WORD PTR B_TEST,BX
	MOV	BYTE PTR LO_EL,1
	MOV	BYTE PTR LO_,0
S_MAIN:	MOV	AL,[DI]
	CMP	AL,CR
	JE	DEVCON
	CMP	AL," "
	JNE	DEV_CO
	INC	DI
	JMP	S_MAIN
DEVCON: ADD	DI,2
	MOV	DX,DI
	POP	CX
	PUSH	CX
	CALL	STRTEST
	CMP	AX,0FFH
	JNE	DEVEND
	MOV	DI,DX
	JMP	S_MAIN
DEVEND:	MOV	BYTE PTR [BX],2
	INC	BX
	PUSH	AX
	MOV	AX,B_TEST
	PUSH	BX
	SUB	BX,AX
	MOV	AX,BX
	POP	BX
	MOV	[BX],AX
	INC	BX
	INC	BX
	POP	AX
	POP	CX
	PUTSTR	PART_P3
	RET
DEVE	ENDP

DEV_CO:	CMP	AL,"$"
	JNE	SET_M2
	INC	DI
	MOV	AL,[DI]
	MOV	DEFST_N,AL
	INC	DI
	MOV	AL,[DI]
	MOV	DEFST_M,AL
	CMP	AL,"$"
	JE	CONT5
	INC	DI
	MOV	AL,[DI]
	CMP	AL,"$"
	JNE	NOT_F
CONT5:	INC	DI
	PUSH	DI
	MOV	CX,OFFSET SERSTR
	MOV	DX,OFFSET SERSTR
	MOV	DX,OFFSET DATBUF
	CALL	STRTEST
	CMP	AX,0FFH
	JE	DEV_M
N_F_M_:	MOV	DX,OFFSET N_F_M
	MOV	AH,09H
	INT	21H
	PUTSTR	SERSTR
	CALL	_EXIT
DEV_M:	MOV	DI,DX
	CMP	BYTE PTR [DI],"="
	JE	_CO99
	INC	DI
	CMP	BYTE PTR [DI],"="
	JNE	N_F_M_
_CO99:	INC	DI
D_CONT:	CALL	TRANS			;;[BX]<[STR:nn$]
	CMP	BYTE PTR [DI],CR
	JNE	D_CONT
	POP	DI
	JMP	S_MAIN
DEV_T:	MOV	DEFST_M,"$"
	JMP	CONT5
SET_M2:	CMP	AL,"{"
	JE	SETLO
	CMP	AL,"}"
	JE	SETLO2
	CALL	TRANS
	JMP	S_MAIN
NOT_F:	CALL	ERRMAS
SETLO2:	JMP	SL2_M
SETLO:	INC	DI
	MOV	AL,[DI]
	CMP	AL,"0"
	JE	ENDLES
	JB	ENDLE0
	CMP	AL,"9"
	JA	ENDLE0
	CMP	AL," "
	JE	ENDLES
;	MOV	ASC_BUF,AL
;	MOV	DX,OFFSET ASC_BUF
	PUSH	BX
	CALL	ASC_HB
	MOV	AL,B_BUFF
	MOV	LO_,AL
;	CALL	ASC_HEX
	POP	BX
;	INC	DI
	MOV	LO__O,DI
	JMP	S_MAIN
ENDLE0:	DEC	DI
	MOV	AL,[DI]
ENDLES:	MOV	LO_EL,0FFH
	INC	DI
	MOV	B_TEST,BX
	JMP	S_MAIN
SL2_M:	MOV	AL,LO_
	CMP	AL,0
	JE	ENDL2
	DEC	LO_
	MOV	AL,LO_
	CMP	AL,0
	JE	EXIT_C
	MOV	DI,LO__O
EXIT_C:	INC	DI
	JMP	S_MAIN
ENDL2:	MOV	BYTE PTR [BX],2
	INC	BX
	PUSH	DX
	MOV	DX,B_TEST
	PUSH	BX
	SUB	BX,DX
	MOV	DX,BX
	POP	BX
	MOV	[BX],DX
	POP	DX
	INC	DI
	INC	BX
	POP	CX
	PUTSTR	PART_P3
	RET
SETDAT	PROC
	XOR	BX,BX	;;SCAN FM_SOUNDDATA
	XOR	CX,CX
	XOR	DX,DX
	XOR	AX,AX
	PUSH	CS
	POP	DS
	PUSH	CS
	POP	ES
	MOV	CX,OFFSET VERIFY
	MOV	BX,1
LOOK:	PUSH	CX
	PUSH	BX
	MOV	DX,OFFSET DATBUF
	MOV	ADWORK,CX
	CALL	STRTEST
	CMP	AX,0FFH
	JE	PREPAS
	WRITEH	<OFFSET D1>,1,HANDLE
	JMP	CONT2
PREPAS:	JMP	PREPAR
CONTI:	WRITEH	<OFFSET D2>,1,HANDLE
	WRITEH	ADR,33,HANDLE
CONT2:	POP	BX
	INC	BX
	POP	CX
	ADD	CX,0AH
	ADD	ADR,33
	CMP	BX,21
	JNE	LOOK
	MOV	CS:ADR,OFFSET SSGENV        ;;SET SSGENV
	MOV	DX,OFFSET DATBUF
SER:	MOV	BX,OFFSET ASC_BUF
	MOV	CX,OFFSET V_SSG
	CALL	STRTEST
	CMP	AX,0FFH
	JNE	NOTHI
	CALL	ASC_HEX
	MOV	CL,ASC_BUF
	DEC	CL
	CMP	CL,20
	JA	SER
	INC	CL
	MOV	CH,0
	MOV	BX,OFFSET SSGENV
SET:	
	WRITEH	<OFFSET ASC_BUF>,1,HANDLE
	MOV	AX,1
	INC	BX
	CALL	SSE		;;[BX]<[DX]
	SUB	DX,2
	JMP	SER			;;*--------------DEVE-------------*
S_BUFF	DW	0
NOTHI:	WRITEH	<OFFSET D1>,1,HANDLE	;;LABEL DEVELOP	                  *
SETDAT	ENDP				;;	                          *
	MOV	CX,OFFSET CH1
	CALL	SETMML
	MOV	CX,OFFSET CH2
	CALL	SETMML
	MOV	CX,OFFSET CH3
	CALL	SETMML
	MOV	CX,OFFSET CH4
	CALL	SETMML
	MOV	CX,OFFSET CH5
	CALL	SETMML
	MOV	CX,OFFSET CH6
	CALL	SETMML
	RET
SETMML	PROC				;;                                *
	ADD	WORD PTR PART_P2,0100H
	MOV	BX,OFFSET DATBUF	;;［ＢＸ］＜［ＤＸ］		  *
	MOV	SI,OFFSET D_CH1
	MOV	D_CH3,8
	ADD	SI,7
	ADD	BX,CS:SIZE
	MOV	[SI],BX
					;;	    "n:"の先頭に合わせる  *
					;;	    ＣＲコードまでを展開  *
	MOV	DX,OFFSET DATBUF	;;--------------------------------*
	CALL	STRTEST
	CMP	AX,0FFH
	JNE	DM1
	PUSH	BX
	WRITEH	<OFFSET D2>,1,HANDLE
	MOV	ERRCNM2,"1"
	CALL	DEVE
;	INPCHR	
	JMP	CH_2
DM1:
	WRITEH	<OFFSET D1>,1,HANDLE
;	PUSH	BX
	RET
	JMP	CH_2_2
CH_2:	;ADD	WORD PTR PART_P2,0100H
	MOV	D_CH3,8
					;;CHANNEL 2 SET
	INC	bx
	PUSH	SI
	MOV	SI,OFFSET D_CH2
	ADD	SI,7
	MOV	[SI],BX
	POP	SI

	MOV	AX,BX
	POP	BX
	PUSH	AX
	SUB	AX,BX
	MOV	S_BUFF,AX
	PUSH	AX
	WRITEH	<OFFSET S_BUFF>,2,HANDLE
	POP	AX
	WRITEH	BX,AX,HANDLE
	ADD	AX,BX
	MOV	BX,AX
	POP	AX
	RET
CH_2_2:
	MOV	CX,OFFSET CH2
	MOV	DX,OFFSET DATBUF
	CALL	STRTEST
	CMP	AX,0FFH
	JNE	DM2
	WRITEH	<OFFSET D2>,1,HANDLE
	MOV	ERRCNM2,"2"
	CALL	DEVE
;	INPCHR
	JMP	CH_3
DM2:
	WRITEH	<OFFSET D1>,1,HANDLE
	JMP	CH_3_2
CH_3:	
	MOV	D_CH3,8
	ADD	WORD PTR PART_P2,0100H
	INC	BX			;;CHANNEL 3 SET
	PUSH	SI
	MOV	SI,OFFSET D_CH3
	ADD	SI,7
	MOV	[SI],BX
	POP	SI

	MOV	AX,BX
	POP	BX
	PUSH	AX
	SUB	AX,BX
	MOV	S_BUFF,AX
	PUSH	AX
	WRITEH	<OFFSET S_BUFF>,2,HANDLE
	POP	AX
	WRITEH	BX,AX,HANDLE
	ADD	AX,BX
	MOV	BX,AX
CH_3_2:
	MOV	CX,OFFSET CH3
	MOV	DX,OFFSET DATBUF
	CALL	STRTEST
	CMP	AX,0FFH
	JNE	DM3
	WRITEH	<OFFSET D2>,1,HANDLE
	MOV	ERRCNM2,"3"
	MOV	D_CH3,8
	CALL	DEVE
;	INPCHR
	JMP	CH_4
DM3:	WRITEH	<OFFSET D1>,1,HANDLE
	JMP	CH_4_2
CH_4:	
	MOV	D_CH3,6
	ADD	WORD PTR PART_P2,0100H
	INC	BX
	PUSH	SI
	MOV	SI,OFFSET D_CH4
	ADD	SI,7
	MOV	[SI],BX
	POP	SI

	MOV	AX,BX
	POP	BX
	PUSH	AX
	SUB	AX,BX
	MOV	S_BUFF,AX
	PUSH	AX
	WRITEH	<OFFSET S_BUFF>,2,HANDLE
	POP	AX
	WRITEH	BX,AX,HANDLE
	ADD	AX,BX
	MOV	BX,AX
CH_4_2:
	MOV	CX,OFFSET CH4
	MOV	DX,OFFSET DATBUF
	WRITEH	<OFFSET D2>,1,HANDLE
	CALL	STRTEST
	CMP	AX,0FFH
	JNE	DM4
	MOV	ERRCNM2,"4"
	MOV	D_CH3,8
	CALL	DEVE
;	INPCHR
	JMP	CH_5
DM4:	WRITEH	<OFFSET D1>,1,HANDLE
	JMP	CH_5_2
CH_5:	
	MOV	D_CH3,8
	ADD	WORD PTR PART_P2,0100H
	INC	BX
	PUSH	SI
	MOV	SI,OFFSET D_CH5
	ADD	SI,7
	MOV	[SI],BX
	POP	SI

	MOV	AX,BX
	POP	BX
	PUSH	AX
	SUB	AX,BX
	MOV	S_BUFF,AX
	PUSH	AX
	WRITEH	<OFFSET S_BUFF>,2,HANDLE
	POP	AX
	WRITEH	BX,AX,HANDLE
	ADD	AX,BX
	MOV	BX,AX
CH_5_2:

	MOV	CX,OFFSET CH5
	MOV	DX,OFFSET DATBUF
	CALL	STRTEST
	CMP	AX,0FFH
	JNE	DM5
	WRITEH	<OFFSET D2>,1,HANDLE
	MOV	ERRCNM2,"5"
	MOV	D_CH3,8
	CALL	DEVE
;	INPCHR
	JMP	CH_6
DM5:	WRITEH	<OFFSET D1>,1,HANDLE
	JMP	CH_6_2
CH_6:	INC	BX
	MOV	D_CH3,8
	ADD	WORD PTR PART_P2,0100H
	PUSH	SI
	MOV	SI,OFFSET D_CH6
	ADD	SI,7
	MOV	[SI],BX
	POP	SI

	MOV	AX,BX
	POP	BX
	PUSH	AX
	SUB	AX,BX
	MOV	S_BUFF,AX
	PUSH	AX
	WRITEH	<OFFSET S_BUFF>,2,HANDLE
	POP	AX
	PUSH	AX
	WRITEH	BX,AX,HANDLE
	POP	AX
	ADD	AX,BX
	MOV	BX,AX
CH_6_2:
	MOV	CX,OFFSET CH6
	MOV	DX,OFFSET DATBUF
	CALL	STRTEST
	CMP	AX,0FFH
	JNE	DM6
	WRITEH	<OFFSET D2>,1,HANDLE
	MOV	ERRCNM2,"6"
	MOV	D_CH3,8
	CALL	DEVE
	JMP	WCONTN
DM6:	WRITEH	<OFFSET D1>,1,HANDLE
WCONTN:
	MOV	AX,BX
	POP	BX
	PUSH	AX
	SUB	AX,BX
	MOV	S_BUFF,AX
	ADD	S_BUFF,2
	PUSH	AX
	WRITEH	<OFFSET S_BUFF>,2,HANDLE
	POP	AX
	ADD	AX,2
	WRITEH	BX,AX,HANDLE
	ADD	AX,BX
	MOV	BX,AX


	POP	DX
	SUB	BX,DX
	CMP	BX,27000
	JE	OVER

RESULT:	RET
OVER:	MOV	DX,OFFSET ERRMOVR
	MOV	AH,09H
	INT	21H
	EXIT


OVERMSG	DB	"MEMORY OVER",CR,LF,"$"
	

ASC_BUF	DB	00H
	DB	","
ADR	DW	OFFSET FM_PARA
CMSG	DB "  ･･･Compiled$"
PREPAR: PUSHA
	CALL	PR_MAIN
	CALL DAT_COM
	PUTSTR	CMSG
	CALL	CR_LF
	POPA
	JMP	CONTI
SETMML	ENDP

PR_MAIN:
	PUSH	DX
	MOV	DX,CX
	MOV	AH,09H
	INT	21H
	POP	DX
	RET

PATH	DB	33 DUP (0)
PATHD	DB	"MMLTEMP.M26",0,25 DUP (0)
EMAS1	DB	"File Error",CR,LF,"$"
EMAS2	DB	"コマンドラインから変換するＭＭＬファイルと",CR,LF
	DB	"生成するオブジェクトファイルを指定してください",CR,LF
	DB	"オブジェクトファイルの拡張子は [.M26]として下さい"
	DB	"（または無指定）",CR,LF,"$"
MFERR	DB	"ＭＭＬファイルが大き過ぎます．（24ＫＢ以内）",CR,LF,"$"
FLAGA	DB	0
_CONT1:

	GETLINEC <CS:PATH>,1
	JC	_E01
	GETLINEC <CS:PATHD>,2
	JMP	_E00

_E01:
	PUSH	CS
	POP	DS
	PUTSTR	EMAS1
	EXIT
_E00:
	PUSH	CS
	POP	DS
	MOV	DI,OFFSET PATHD
SETL:	CMP	BYTE PTR [DI],0
	JE	SETK
	INC	DI
	CMP	BYTE PTR [DI],"."
	JNE	SETL
	MOV	FLAGA,0FFH
	JMP	SETL
SETK:	CMP	FLAGA,0FFH
	JE	NSET
	MOV	AX,"M."
	MOV	[DI],AX
	MOV	AX,"62"
	MOV	[DI+2],AX
	MOV	BYTE PTR [DI+4],0
NSET:	OPENH	<OFFSET PATH>,0,HANDLE
	JNC	TECPAL
	JMP	_E01
TECPAL:	MOV	AH,3FH
	MOV	DX,OFFSET DATBUF
	MOV	CX,24577
	MOV	BX,HANDLE
	INT	21H
	CMP	AX,24577
	JNE	RC01
	PUTSTR	MFERR
	EXIT
RC01:	ADD	BUFEND,AX
	MOV	SIZE,AX
	CLOSEH	HANDLE
	CREATEH	<OFFSET PATHD>,0
	JNC	TECPAL1
	JMP	_E01
TECPAL1: OPENH	<OFFSET PATHD>,2,HANDLE
	JNC	TECPAL2
	JMP	_E01
TECPAL2:
	MOV	HANDLE,AX
	CALL	SETDAT
	CLOSEH	HANDLE
	PUTSTR	CMPLTMSG
	MOV	AX,3557H
	INT	21H
	PUSH	ES
	POP	BX
	MOV	DX,OFFSET DATBUF
	PUSH	CS
	POP	DS
	SHR	DX,1
	SHR	DX,1
	SHR	DX,1
	SHR	DX,1
	MOV	DS,AX
	ADD	AX,DX
	INC	AX
	MOV	DS,AX
	XOR	DX,DX
	MOV	AX,2557H
	INT	21H
	MOV	AX,SEG SOUND
	MOV	DX,OFFSET SOUND
	MOV	DS,AX
	MOV	AX,2556H
	INT	21H
	MOV	SI,OFFSET PATHD
C000:	INC	SI
	CMP	BYTE PTR CS:[SI],"."
	JNE	C000
	MOV	BYTE PTR CS:[SI],0
	MOV	AX,0201H
	INT	56H
	PUSH	CS
	POP	DS
	MOV	DX,OFFSET PATHD
	MOV	AX,0100H
	INT	56H
	MOV	AX,0400H
	INT	56H
	INPCHR
	MOV	AX,0
	INT	56H
	EXIT


DATBUF:	
	DB	37888 DUP (?)

CODE	ENDS
	END	START


